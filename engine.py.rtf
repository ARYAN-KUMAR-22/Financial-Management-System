{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import pandas as pd\
from sklearn.model_selection import train_test_split\
from sklearn.ensemble import RandomForestRegressor\
from sklearn.metrics import mean_squared_error\
from sklearn.preprocessing import OneHotEncoder\
import numpy as np\
\
# Load the dataset\
file_path = '/Users/prarabdhkumar/Downloads/archive/personal_transactions_dashboard_ready (2).xlsx'\
data = pd.read_excel(file_path)\
# Filter for debit transactions (expenses only)\
expenses = data[data['Transaction Type'] == 'debit'].copy()\
# Convert the Date column to numerical format (timestamp)\
expenses['Date'] = pd.to_datetime(expenses['Date']).astype(int) / 10**9\
# One-hot encode categorical variables\
encoder = OneHotEncoder(sparse_output=False, drop='first')\
encoded_cols = encoder.fit_transform(expenses[['Description', 'Category', 'Account Name', 'Month']])\
encoded_df = pd.DataFrame(encoded_cols, columns=encoder.get_feature_names_out())\
# Combine encoded features with the numerical date\
features = pd.concat([expenses[['Date']].reset_index(drop=True), encoded_df], axis=1)\
target = expenses['Amount'].reset_index(drop=True)\
# Train-test split\
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\
# Train the Random Forest model\
model = RandomForestRegressor(n_estimators=100, random_state=42)\
model.fit(X_train, y_train)\
# Make predictions and evaluate\
predictions = model.predict(X_test)\
rmse = np.sqrt(mean_squared_error(y_test, predictions))\
print(f'RMSE: \{rmse\}')\
# Predict future expenses for the next 30 days\
dates_future = pd.date_range(start=pd.to_datetime(expenses['Date'].max(), unit='s'), periods=30)\
future_features = pd.DataFrame(\{'Date': dates_future.astype(int) / 10**9\})\
\
# Generate encoded dummy variables with the same structure as training data\
encoded_future = pd.DataFrame(0, index=np.arange(30), columns=encoded_df.columns)\
# Combine the date with encoded dummy variables\
future_features = pd.concat([future_features.reset_index(drop=True), encoded_future], axis=1)\
# Predict future expenses\
future_predictions = model.predict(future_features)\
print('Future Expenses Predictions for the next 30 days:')\
print(future_predictions)\
# Predict future expenses\
future_predictions = model.predict(future_features)\
import matplotlib.pyplot as plt\
\
print('Future Expenses Predictions for the next 30 days:')\
plt.figure(figsize=(10, 6))\
plt.plot(dates_future, future_predictions, marker='o', linestyle='-', color='blue', label='Predicted Expenses')\
plt.title('Future Expenses for the Next 30 Days')\
plt.xlabel('Date')\
plt.ylabel('Expense Amount')\
plt.xticks(rotation=45)\
plt.grid(True)\
plt.legend()\
plt.show()\
}